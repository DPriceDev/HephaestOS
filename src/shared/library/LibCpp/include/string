// Copyright (C) 2023 David Price - All Rights Reserved
// This file is part of HephaestOS.
//
// HephaestOS is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// HephaestOS is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with HephaestOS.  If not, see <https://www.gnu.org/licenses/>.
//

#ifndef HEPHAEST_OS_SHARED_LIBRARY_CPP_STRING_H
#define HEPHAEST_OS_SHARED_LIBRARY_CPP_STRING_H

#include <limits>

namespace std {

    namespace detail {
        template<class CharacterType>
        class BaseCharacterTraits {

          public:
            static constexpr std::size_t length(const CharacterType* string) {
                const CharacterType* runner = string;
                while (*(runner) != '\0') { ++runner; }
                return static_cast<std::size_t>(runner - string);
            }

            static constexpr auto compare(const CharacterType* s1, const CharacterType* s2, std::size_t count) -> int {
                while (--count) {
                    if (!equal(*s1, *s2)) {
                        if (lessThan(*s1, *s2)) {
                            return -1;
                        } else {
                            return 1;
                        }
                    }
                    ++s1;
                    ++s2;
                }
                return 0;
            }

            static constexpr auto equal(CharacterType a, CharacterType b) noexcept -> bool { return a == b; }

            static constexpr auto lessThan(CharacterType a, CharacterType b) noexcept -> bool { return a < b; }
        };
    }// namespace detail

    /**
     * todo: add member functions as used?
     * @tparam CharacterType
     */
    template<class CharacterType>
    class CharacterTraits : public detail::BaseCharacterTraits<CharacterType> {};

    /**
     * char specialization of character traits
     */
    template<>
    class CharacterTraits<char> : public detail::BaseCharacterTraits<char> {
        using CharacterType = char;
        using IntegerType = int;
        using OffsetType = int;
        using PositionType = int;
        using StateType = int;
    };
}// namespace std

#endif// HEPHAEST_OS_SHARED_LIBRARY_CPP_STRING_H
